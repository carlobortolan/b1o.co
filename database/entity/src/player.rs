//! SeaORM Entity. Generated by sea-orm-codegen 0.10.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize, Default)]
#[sea_orm(table_name = "player")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub image_url: String,
    pub name: String,
    pub upvotes: i32,
    pub downvotes: i32,
    pub source: String,
    pub date: DateTime,
    pub average_rating: f32,
    pub rating: f32,
}

impl Model {
    pub fn calculate_score(&mut self, new_upvotes: i32, new_downvotes: i32, others_rating: f32) {
        // Update upvotes and downvotes
        self.upvotes += new_upvotes;
        self.downvotes += new_downvotes;

        // TODO: Improve by using e.g., https://en.wikipedia.org/wiki/Chess_rating_system#Elo_rating_system
        // Calculate new average rating and rating
        // - average rating is the ratio of upvotes to total votes
        // - rating is the difference between upvotes and downvotes
        self.rating = 1f32 / (1f32 + 10f32.powf(self.rating - others_rating) / 400f32);

        let total_votes = self.upvotes + self.downvotes;
        if total_votes != 0 {
            self.average_rating = self.upvotes as f32 / total_votes as f32;
        } else {
            self.average_rating = 0f32;
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
